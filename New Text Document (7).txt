import cv2
import numpy as np
from os import listdir
from os.path import isfile,join
import serial
import time
import pyttsx3
import requests
import socket

def checking():
    print('door is open');


q=1
x=0
c=0
m=0
d=0
k=0
while q<=2:
    data_path = 'code/user/'
    onlyfiles = [f for f in listdir(data_path) if isfile(join(data_path,f))]
    Training_data, Lebels,user_names = [],[],[]
    for i , files in enumerate(onlyfiles):
        image_path = data_path + onlyfiles[i]
        images = cv2.imread(image_path,cv2.IMREAD_GRAYSCALE)
        Training_data.append(np.asarray(images, dtype = np.uint8)) 
        Lebels.append(i)
        user_names.append(files.split('.')[0])

    Lebels = np.asarray(Lebels, dtype = np.int32)
    model = cv2.face.LBPHFaceRecognizer_create()
    model.train(np.asarray(Training_data),np.asarray(Lebels))
    print("training complete")
    q+=1
face_classifier = cv2.CascadeClassifier('code\haarcascade_frontalface_default.xml')

while True: 
 q=1
 x=0
 c=0
 m=0
 d=0

 def speak(audio):
     engine.say(audio)
     engine.runAndWait()
 engine = pyttsx3.init('sapi5')
 voices=engine.getProperty('voices')
 engine.setProperty("voice",voices[0].id)
 engine.setProperty("rate",140)
 engine.setProperty("volume",1000)



 def detect_faces(img):
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray,1.3,5)
    return faces, gray

 def draw_rectangle(img, rect):
    (x, y, w, h) = rect
    cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)

 def draw_text(img, text, x, y):
    cv2.putText(img, text, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

 cap = cv2.VideoCapture(0)
 while True:
    ret, frame = cap.read()

    faces, gray = detect_faces(frame)

    for face in faces:
        (x, y, w, h) = face
        roi_gray = gray[y:y+h, x:x+w]
        roi_gray = cv2.resize(roi_gray, (200, 200))
        result = model.predict(roi_gray)

        if result[1] < 500:
            confidence = int(100 * (1 - (result[1])/300))
            user_name = user_names[result[0]]
            display_string = user_name + " " + str(confidence)
            draw_text(frame, display_string, x, y)
        
        draw_rectangle(frame, face)

    

    if cv2.waitKey(1) == 13:
        break
    recognized=False;
    if confidence>=83:
            cv2.putText(frame,"unlocked",(250,450),cv2.FONT_HERSHEY_SCRIPT_COMPLEX,1,(0,255,255))
            cv2.imshow('face',frame)
            x+=1
            recognized=True;
            if(recognized):
                    checking()

    else:
           cv2.putText(frame,"locked",(250,450),cv2.FONT_HERSHEY_SCRIPT_COMPLEX,1,(0,255,255))
           cv2.imshow('face',frame)
           c+=1

 cap.release()
 cv2.destroyAllWindows()


 
 


 